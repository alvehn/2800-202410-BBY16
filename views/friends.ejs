<%- include("templates/default") %>
    <div class="flex flex-col items-center h-screen select-none bg-white">
        <div class="bg-celadon w-full p-4 flex flex-col items-center justify-center text-white rounded-b-3xl">
            <img class="w-24 h-24 rounded-full object-cover border-4 border-white" src="https://via.placeholder.com/150"
                alt="profile picture">
            <h1 class="text-2xl font-bold mt-2">
                <%= displayName %>Name
            </h1>
        </div>
        <div class="flex justify-center mt-4">
            <!-- friends button -->
            <a class="<%= currentPage === 'friends' ? 'bg-celadon text-white' : 'bg-light-beige text-font hover:bg-celadon hover:text-white' %> font-bold py-2 px-4 rounded-full no-underline mr-3"
                href="/friends">Friends</a>
            <!-- groups button -->
            <a class="<%= currentPage === 'groups' ? 'bg-celadon text-white' : 'bg-light-beige text-font hover:bg-celadon hover:text-white' %> font-bold py-2 px-4 rounded-full no-underline ml-3"
                href="/groups">Groups</a>
        </div>
        <div class="pt-4 w-full max-w-md px-4">
            <!-- search field-->
            <div class="mb-4">
                <input id="searchField" type="text" placeholder=" 🔍 Search..."
                    class="w-full px-4 py-2 border border-gray-300 text-font rounded-3xl focus:outline-none focus:ring-2 focus:ring-celadon">
            </div>

            <div id="friends_container" class="bg-white rounded-lg">

            </div>

            <div>
                <button id="open_adding" onclick="openAddFriends()"
                    class="fixed w-12 h-12 bottom-20 right-4 bg-celadon hover:bg-green-400 text-white rounded-full text-2xl flex items-center justify-center shadow-lg">+</button>
            </div>

            <div>
                <button id="open_notification" onclick="openNotifications()"
                    class="fixed w-12 h-12 bottom-20 left-4 bg-celadon hover:bg-green-400 text-white rounded-full text-2xl flex items-center justify-center shadow-lg">🔔</button>
            </div>

        </div>

        <!--New Improved Modal for adding friends-->
        <div id="addFriends" onclick="hideAddFriends()" class="fixed left-0 top-0 bg-black bg-opacity-50 w-full h-screen flex justify-center items-center
            opacity-0 hidden transition-opacity duration-500">
            <div onclick="event.stopImmediatePropagation()"
                class="bg-white rounded shadow-md w-full flex overflow-hidden max-w-md mx-4">
                <div class="bg-white p-6 rounded-lg shadow-lg w-full">
                    <form id="form">
                        <input name='username' id='username' type='text' placeholder='Add Friend'
                            class="w-full px-4 py-2 border border-gray-300 rounded-3xl focus:outline-none focus:ring-2 focus:ring-celadon mb-4">
                        <button type="button" onclick="return addFriend()"
                            class="w-full px-4 py-2 rounded-3xl bg-celadon hover:bg-green-400 text-white">Add</button>
                    </form>
                    <div class="flex justify-center mt-4">
                        <button id="close_adding" onclick="hideAddFriends()"
                            class="px-4 py-2 rounded-3xl bg-celadon hover:bg-green-400 text-white">Close</button>
                    </div>
                </div>
            </div>
        </div>

        <!--Modal for showing notifications-->
        <div id="notifications" onclick="hideNotifications()" class="fixed left-0 top-0 bg-black bg-opacity-50 w-full h-screen flex justify-center items-center
            opacity-0 hidden transition-opacity duration-500">
            <div onclick="event.stopImmediatePropagation()"
                class="bg-white rounded shadow-md w-full flex overflow-hidden max-w-md mx-4">
                <div class="bg-white p-6 rounded-lg shadow-lg w-full">
                    <h2>Notifications</h2>
                    <div id="notifications_container" class="bg-white rounded-lg shadow-md p-4">

                    </div>
                    <div class="flex justify-center mt-4">
                        <button id="close_adding" onclick="hideNotifications()"
                            class="px-4 py-2 rounded-3xl bg-celadon hover:bg-green-400 text-white">Close</button>
                    </div>
                </div>
            </div>
        </div>

        <!--Modal for showing friend's profile-->
        <div id="friendProfile" onclick="hideProfile()" class="fixed left-0 top-0 bg-black bg-opacity-50 w-full h-screen flex justify-center items-center
            opacity-0 hidden transition-opacity duration-500">
            <div onclick="event.stopImmediatePropagation()"
                class="bg-white rounded shadow-md w-full flex overflow-hidden max-w-md mx-4">
                <div class="bg-white p-6 rounded-lg shadow-lg w-full">
                    <button id="close_adding" onclick="hideProfile()" class="mt-4 text-red-500 w-full">Close</button>
                </div>
            </div>
        </div>
    </div>


    <!-- This is the template for displaying friends -->
    <template id="friendCardTemplate">
        <div id="profile"
            class="p-3 border rounded-lg shadow-md mb-2 flex items-center hover:bg-light-sage transition-colors duration-100">
            <img src="https://via.placeholder.com/50" alt="profile picture" class="rounded-full w-12 h-12 object-cover">
            <div class="flex justify-between w-full items-center ml-4">
                <div id="friend_username" class="font-bold"></div>
                <div id="friend_status" class="text-gray-600"></div>
            </div>
        </div>
    </template>

    <!-- This is the template for displaying notifications in popup -->
    <template id="notificationCardTemplate">
        <div id="notificationCard" class="p-3 border rounded-lg shadow-md mb-2 flex items-center">
            <img src="https://via.placeholder.com/50" alt="profile picture" class="rounded-full w-12 h-12 object-cover">
            <div class="flex justify-between w-full items-center ml-4">
                <p id="request"></p>
                <button id="accept"
                    class="w-12 h-12 bg-celadon hover:bg-green-400 text-white rounded-full text-2xl flex items-center justify-center shadow-lg">✓</button>
                <button id="decline"
                    class="w-12 h-12 bg-celadon hover:bg-green-400 text-white rounded-full text-2xl flex items-center justify-center shadow-lg">×</button>
            </div>
        </div>
    </template>

    <script>
        const eventSearch = document.getElementById("searchField");

        eventSearch.addEventListener("keyup", e => {
            //gets value of search bar and puts it to lowercase
            let currentValue = e.target.value.toLowerCase();
            //gets all the card titles
            let names = document.querySelectorAll('[id^="friend_username"]');
            names.forEach(name => {
                if (name.textContent.toLowerCase().includes(currentValue)) {
                    //accesses the variable that determines whether a name is visible or not
                    name.parentNode.style.display = "block";
                } else {
                    name.parentNode.style.display = "none";
                }
            })
        })

        function openAddFriends() {
            let form = document.getElementById("form");
            // Get the next sibling of the form
            var nextElement = form.nextElementSibling;
            // Loop through and remove all adjacent <p> elements
            if (nextElement && nextElement.tagName === 'P') {
                var elementToRemove = nextElement;
                nextElement = nextElement.nextElementSibling;
                elementToRemove.remove();
            }
            let popup = document.getElementById("addFriends");
            popup.classList.remove("hidden");
            setTimeout(() => {
                popup.classList.add("opacity-100");
            }, 20);
        }

        function hideAddFriends() {
            let popup = document.getElementById("addFriends");
            popup.classList.add("opacity-0");
            popup.classList.remove("opacity-100");
            setTimeout(() => {
                popup.classList.add("hidden");
            }, 500);
        }

        function openNotifications() {
            let popup = document.getElementById("notifications");
            popup.classList.remove("hidden");
            setTimeout(() => {
                popup.classList.add("opacity-100");
            }, 20);
        }

        function hideNotifications() {
            let popup = document.getElementById("notifications");
            popup.classList.add("opacity-0");
            popup.classList.remove("opacity-100");
            setTimeout(() => {
                popup.classList.add("hidden");
            }, 500);
        }

        function openProfile(username) {
            let popup = document.getElementById("friendProfile");
            popup.classList.remove("hidden");
            setTimeout(() => {
                popup.classList.add("opacity-100");
            }, 20);
        }

        function hideProfile() {
            let popup = document.getElementById("friendProfile");
            popup.classList.add("opacity-0");
            popup.classList.remove("opacity-100");
            setTimeout(() => {
                popup.classList.add("hidden");
            }, 500);
        }

        function handleNotification(name, choice) {
            let jsonObject = {};
            console.log(name);
            jsonObject["username"] = name;
            fetch('/notifications/' + choice, {
                method: 'post',
                headers: {
                    'Content-Type': 'application/json' // Set Content-Type to JSON
                },
                body: JSON.stringify(jsonObject) // Send JSON data in the body
            })
                .then(response => {
                    if (response.ok) {
                        return response.json(); // Get the response as JSON
                    } else {
                        throw new Error('Form submission failed');
                    }
                })
                .then(data => {
                    if (choice == "accepts") {
                        // Clear friends container and updates it if friend request is accepted
                        let container = document.getElementById('friends_container');
                        container.innerHTML = '';
                        displayFriendsDynamically();
                    }
                    // Clear notification container and updates it
                    let notifications = document.getElementById('notifications_container');
                    notifications.innerHTML = '';
                    displayNotificationsDynamically()
                    // Get the next sibling of the notification container
                    var nextElement = notifications.nextElementSibling;
                    // If adjacent is <p> element remove it
                    if (nextElement && nextElement.tagName === 'P') {
                        var elementToRemove = nextElement;
                        nextElement = nextElement.nextElementSibling;
                        elementToRemove.remove();
                    }
                    // Insert the new <p> message
                    notifications.insertAdjacentHTML('afterend', `<p>${data.message}</p>`);
                })
                .catch(error => {
                    // Handle network errors or errors from the server
                    console.error('Error:', error);
                });
        }

        function addFriend() {
            let form = document.getElementById("form");

            // Serialize form data into a JSON object
            let jsonObject = {};
            for (let input of form.elements) {
                if (input.name) {
                    jsonObject[input.name] = input.value;
                }
            }

            fetch('/friends/check', {
                method: 'post',
                headers: {
                    'Content-Type': 'application/json' // Set Content-Type to JSON
                },
                body: JSON.stringify(jsonObject) // Send JSON data in the body
            })
                .then(response => {
                    if (response.ok) {
                        return response.json(); // Get the response as JSON
                    } else {
                        throw new Error('Form submission failed');
                    }
                })
                .then(data => {
                    // Get the next sibling of the form
                    var nextElement = form.nextElementSibling;
                    // Loop through and remove all adjacent <p> elements
                    if (nextElement && nextElement.tagName === 'P') {
                        var elementToRemove = nextElement;
                        nextElement = nextElement.nextElementSibling;
                        elementToRemove.remove();
                    }
                    // Insert the new <p> message
                    form.insertAdjacentHTML('afterend', `<p>${data.message}</p>`);

                })
                .catch(error => {
                    // Handle network errors or errors from the server
                    console.error('Error:', error);
                });
        }

        async function displayFriendsDynamically() {
            let friends;
            // fetch the friends list from database
            await fetch('/friends/get_friends', {
                method: 'post',
            })
                .then(response => {
                    if (response.ok) {
                        return response.json(); // Get the response as JSON
                    } else {
                        throw new Error('Form submission failed');
                    }
                })
                .then(data => {
                    friends = data.friends;
                })
                .catch(error => {
                    // Handle network errors or errors from the server
                    console.error('Error:', error);
                });
            // Creates the friends card
            let cardTemplate = document.getElementById("friendCardTemplate");
            let username = "test";
            let status = "test";
            for (let friend of friends) {
                let newcard = cardTemplate.content.cloneNode(true);
                // Serialize friend data into a JSON object
                let jsonObject = {};
                jsonObject["friend_id"] = friend;
                // fetch friend username and status from the database
                await fetch('/friends/get_friend_status', {
                    method: 'post',
                    headers: {
                        'Content-Type': 'application/json' // Set Content-Type to JSON
                    },
                    body: JSON.stringify(jsonObject) // Send JSON data in the body
                })
                    .then(response => {
                        if (response.ok) {
                            return response.json(); // Get the response as JSON
                        } else {
                            throw new Error('Form submission failed');
                        }
                        //         })
                        //         .then(data => {
                        //             console.log(data.username);
                        //             console.log(data.status);
                        //             username = data.username;
                        //             status = data.status;
                        //         })
                        //         .catch(error => {
                        //             // Handle network errors or errors from the server
                        //             console.error('Error:', error);
                        //         });

                        //     newcard.getElementById("friend_username").innerHTML = username;
                        //     newcard.getElementById("friend_status").innerHTML = status;
                        //     newcard.getElementById("profile").setAttribute('onclick', `openProfile('${username}')`);
                        //     document.getElementById("friends_container").appendChild(newcard);
                        // }
                    })
                    .then(data => {
                        newcard.getElementById("friend_username").textContent = data.username || 'Unknown';
                        const statusElement = newcard.getElementById("friend_status");
                        statusElement.textContent = data.status || 'offline';
                        if (data.status === 'online') {
                            statusElement.classList.add('text-green-600');
                        } else {
                            statusElement.classList.add('text-red-500');
                        }
                    })
                    .catch(error => {
                        console.error('Error:', error);
                        newcard.getElementById("friend_username").textContent = 'Unknown';
                        const statusElement = newcard.getElementById("friend_status");
                        statusElement.textContent = 'offline';
                        statusElement.classList.add('text-red-500');
                    });

                document.getElementById("friends_container").appendChild(newcard);
            }
        }

        async function displayNotificationsDynamically() {
            let incomingRequests;
            // fetch the friends list from database
            await fetch('/get_notifications', {
                method: 'post',
            })
                .then(response => {
                    if (response.ok) {
                        return response.json(); // Get the response as JSON
                    } else {
                        throw new Error('Form submission failed');
                    }
                })
                .then(data => {
                    incomingRequests = data.incomingRequests;
                })
                .catch(error => {
                    // Handle network errors or errors from the server
                    console.error('Error:', error);
                });
            // Creates the notification card
            let cardTemplate = document.getElementById("notificationCardTemplate");
            for (let incomingRequest of incomingRequests) {
                let newcard = cardTemplate.content.cloneNode(true);
                newcard.getElementById("request").innerHTML = incomingRequest;
                newcard.getElementById("accept").setAttribute('onclick', `return handleNotification("${incomingRequest}", "accept")`);
                newcard.getElementById("decline").setAttribute('onclick', `return handleNotification("${incomingRequest}", "decline")`);
                document.getElementById("notifications_container").appendChild(newcard);
            }
        }

        displayFriendsDynamically();

        displayNotificationsDynamically()

    </script>
    <%- include("templates/navbar") %>