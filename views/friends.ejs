<%- include("templates/default") %>
    <div class="justify-center items-center h-screen select-none">
        <ul class="nav nav-tabs flex justify-center space-x-2 ">
            <!-- friends button -->
            <li class="nav-item">
                <a class="nav-link text-gray-700 hover:text-blue-500" aria-current="page" href="/friends">Friends</a>
            </li>
            <!-- group button -->
            <li class="nav-item">
                <a class="nav-link text-gray-700 hover:text-blue-500" href="/groups">Groups</a>
            </li>
        </ul>
        <div class="pt-4 mx-auto max-w-screen-lg px-4">
            <!-- search field-->
            <div class="mb-4">
                <input id="searchField" type="text" placeholder="Search..."
                    class="w-full px-4 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500">
            </div>

            <div id="friends_container">

            </div>

            <div>
                <button id="open_adding" onclick="openAddFriends()"
                    class="fixed w-12 h-12 bottom-4 right-4 bg-blue-500 text-white rounded-full text-2xl flex items-center justify-center">+</button>
            </div>

        </div>

        <!--New Improved Modal-->
        <div id="addFriends" onclick="hideAddFriends()" class="fixed left-0 top-0 bg-black bg-opacity-50 w-full h-screen flex justify-center items-center
            opacity-0 hidden transition-opacity duration-500">
            <div onclick="event.stopImmediatePropagation()"
                class="bg-white rounded shadow-md w-full flex overflow-hidden">
                <div class="bg-white p-6 rounded-lg shadow-lg w-80">
                    <form id="form">
                        <input name='username' id='username' type='text' placeholder='Add Friend'
                            class="w-full px-4 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500 mb-4">
                        <button type="button" onclick="return addFriend()"
                            class="w-full px-4 py-2 bg-green-500 text-white rounded-lg">Add</button>
                    </form>
                    <button id="close_adding" onclick="hideAddFriends()" class="mt-4 text-red-500 w-full">Close</button>
                </div>
            </div>
        </div>
    </div>


    <!-- This is the template for popup when veiwing user profile -->
    <template id="friendCardTemplate">
        <div class="p-4 border rounded-lg shadow-md mb-4">
            <p id="friend_username" class="font-bold"></p>
            <p id="friend_status" class="text-gray-600"></p>
        </div>
    </template>

    <script>
        const eventSearch = document.getElementById("searchField");

        eventSearch.addEventListener("keyup", e => {
            //gets value of search bar and puts it to lowercase
            let currentValue = e.target.value.toLowerCase();
            //gets all the card titles
            let names = document.querySelectorAll('[id^="friend_username"]');
            names.forEach(name => {
                if (name.textContent.toLowerCase().includes(currentValue)) {
                    //accesses the variable that determines whether a name is visible or not
                    name.parentNode.style.display = "block";
                } else {
                    name.parentNode.style.display = "none";
                }
            })
        })

        function openAddFriends() {
            let popup = document.getElementById("addFriends");
            popup.classList.remove("hidden");
            setTimeout(() => {
                popup.classList.add("opacity-100");
            }, 20);
        }

        function hideAddFriends() {
            let popup = document.getElementById("addFriends");
            popup.classList.add("opacity-0");
            popup.classList.remove("opacity-100");
            setTimeout(() => {
                popup.classList.add("hidden");
            }, 500);
        }

        function addFriend() {
            let form = document.getElementById("form");

            // Serialize form data into a JSON object
            let jsonObject = {};
            for (let input of form.elements) {
                if (input.name) {
                    jsonObject[input.name] = input.value;
                }
            }

            fetch('/friends/check', {
                method: 'post',
                headers: {
                    'Content-Type': 'application/json' // Set Content-Type to JSON
                },
                body: JSON.stringify(jsonObject) // Send JSON data in the body
            })
                .then(response => {
                    if (response.ok) {
                        return response.json(); // Get the response as JSON
                    } else {
                        throw new Error('Form submission failed');
                    }
                })
                .then(data => {
                    console.log(data.message);
                    form.insertAdjacentHTML('afterend', `<p>${data.message}</p>`);
                })
                .catch(error => {
                    // Handle network errors or errors from the server
                    console.error('Error:', error);
                });
        }

        async function displayFriendsDynamically() {
            let friends;
            // fetch the friends list from database
            await fetch('/friends/get_friends', {
                method: 'post',
            })
                .then(response => {
                    if (response.ok) {
                        return response.json(); // Get the response as JSON
                    } else {
                        throw new Error('Form submission failed');
                    }
                })
                .then(data => {
                    friends = data.friends;
                })
                .catch(error => {
                    // Handle network errors or errors from the server
                    console.error('Error:', error);
                });
            // Creates the friends card
            let cardTemplate = document.getElementById("friendCardTemplate");
            let username = "test";
            let status = "test";
            for (let friend of friends) {
                let newcard = cardTemplate.content.cloneNode(true);
                // Serialize friend data into a JSON object
                let jsonObject = {};
                jsonObject["friend_id"] = friend;
                // fetch friend username and status from the database
                await fetch('/friends/get_friend_status', {
                    method: 'post',
                    headers: {
                        'Content-Type': 'application/json' // Set Content-Type to JSON
                    },
                    body: JSON.stringify(jsonObject) // Send JSON data in the body
                })
                    .then(response => {
                        if (response.ok) {
                            return response.json(); // Get the response as JSON
                        } else {
                            throw new Error('Form submission failed');
                        }
                    })
                    .then(data => {
                        console.log(data.username);
                        console.log(data.status);
                        username = data.username;
                        status = data.status;
                    })
                    .catch(error => {
                        // Handle network errors or errors from the server
                        console.error('Error:', error);
                    });
                newcard.getElementById("friend_username").innerHTML = username;
                newcard.getElementById("friend_status").innerHTML = status;
                document.getElementById("friends_container").appendChild(newcard);
            }
        }

        displayFriendsDynamically();

    </script>
    <%- include("templates/navbar") %>