<%- include("templates/header", { username: user.username }) %>
<div class="flex flex-col h-screen relative">
  <div class="flex items-end justify-center bg-gray-200 relative h-2/3 overflow-hidden">
    <!-- Background layers for parallax effect -->
    <div class="static-background-home"></div>
    <!-- animal sprite -->
    <div class="w-[320px] h-[160px] pet z-20 animate-idle" style="background-image: url('/sprite_sheets/<%= user.current_pet_name %>.png')"></div>
  </div>

  <div class="flex flex-col items-center justify-start bg-white pb-4 z-10 relative h-1/3">
    
    <div class="font-bold text-gray-700 mt-4 mb-3">
      <span id="hr" class="text-2xl">00</span>
      <span class="text-sm">Hr</span>
      <span id="min" class="text-2xl">00</span>
      <span class="text-sm">Min</span>
      <span id="sec" class="text-2xl">00</span>
      <span class="text-sm">Sec</span>
    </div>

    <div class="flex justify-center text-2xl font-bold text-gray-700 items-center w-full mt-3 mb-1">
        <img src="/assets/Favicon.png" class="w-6 h-auto">
        <span class="ml-5"><%= user.points %></span>
    </div> 

    <div class="mt-3">  
      <% if (user.study_session.inSession && !user.study_session.group) { %>
        <form action="/start_study_session" method="POST">
          <input type="hidden" name="inSession" value="true">
          <button type="submit" class="px-4 py-2 bg-blue-500 text-white rounded hover:bg-blue-600 transition">View My Session</button>
        </form>
      <% } else { %>
        <form action="/start_study_session" method="POST">
          <input type="hidden" name="inSession" value="false">
          <button type="submit" class="px-4 py-2 bg-argentinian-blue text-white rounded transition">Start Study Session</button>
        </form>
      <% } %>
      <% if (user.study_session.inSession && user.study_session.group) { %>
        <form action="/start_group_session" method="POST">
          <input type="hidden" name="inSession" value="true">
          <button type="submit" class="px-4 py-2 bg-blue-500 text-white rounded hover:bg-blue-600 transition">View Group Session</button>
        </form>
      <% } else { %>
        <form onsubmit="return openSelectGroups()">
          <input type="hidden" name="inSession" value="false">
          <button type="submit" class="px-4 py-2 bg-argentinian-blue text-white rounded transition">Start Group Session</button>
        </form>
      <% } %>
    </div>

    <div id="riddleModal" class="hidden fixed inset-0 flex items-center justify-center z-30 bg-gray-800 bg-opacity-75">
      <div class="bg-white p-6 rounded-lg shadow-lg w-11/12 md:w-1/2 lg:w-1/3 relative">
          <h2 class="text-2xl font-bold mb-4">Solve the Riddle</h2>
          <p class="mb-4">Where do animals go to get their new tails when they're broken?</p>
          <input type="text" id="riddleAnswer" class="w-full p-2 border border-gray-300 rounded mb-4" placeholder="Your answer">
          <button onclick="checkAnswer()" class="bg-argentinian-blue text-white py-2 px-4 rounded hover:bg-blue-600">Submit</button>
          <button onclick="closeModal()" class="bg-light-coral text-white rounded py-2 px-4 hover:bg-red-600">Close</button>
          <p id="resultMessage" class="mt-4"></p>
          <button id="claimPrizeButton" onclick="claimPrize()" class="hidden bg-celadon text-white py-2 px-4 rounded mt-4 hover:bg-green-600">Claim Prize</button>
      </div>
    </div>
  </div>
</div><br><br>

<!--Modal for selecting study group-->
<div id="selectGroup" onclick="hideSelectGroups()" class="fixed left-0 top-0 bg-black bg-opacity-50 w-full h-screen flex justify-center items-center z-50 opacity-0 transition-opacity duration-500 hidden">
  <div onclick="event.stopImmediatePropagation()" class="bg-white rounded shadow-md w-full flex overflow-hidden max-w-md mx-4">
    <div class="bg-white p-6 rounded-lg shadow-lg w-full">
      <form id="group_study_form" action="/start_group_session" method="POST" onsubmit="return setUpGroup(event)">
          <h3>Select Study Group</h3>
          <div id="groups_container" class="bg-white rounded-lg border p-4 mb-6"></div>
      </form>
      <div class="flex justify-center mt-4">
        <button id="close_adding" onclick="hideSelectGroups()" class="px-4 py-2 rounded-3xl bg-celadon hover:bg-dark-celadon text-white">Close</button>
      </div>
    </div>
  </div>
</div>

<template id="groupCardTemplate">
  <button type="submit" 
    class="submit-button flex justify-between bg-white p-3 border rounded-2xl mb-2 items-center transition-colors duration-100 hover:outline hover:outline-1 hover:outline-[#B5E58A] hover:shadow-[0_0_2px_2px_#B5E58A]">
    <img src="https://via.placeholder.com/50" alt="group picture" class="rounded-full w-12 h-12 object-cover">
    <div class=" w-60 ml-2">
        <div id="group_name" class="font-bold text-font"></div>
    </div>
    <div>
        <div id="members_Count" class="text-sm text-font"></div>
    </div>
  </div>
</template>

<script>
  var clickedButton = null; // Global variable to store the reference to the clicked button

  function openSelectGroups() {
    displayGroupsDynamically();
    let popup = document.getElementById("selectGroup");
    popup.classList.remove("hidden");
    setTimeout(() => {
      popup.classList.add("opacity-100");
    }, 20);
    return false;
  }

  function hideSelectGroups() {
    let popup = document.getElementById("selectGroup");
    popup.classList.add("opacity-0");
    popup.classList.remove("opacity-100");
    setTimeout(() => {
      popup.classList.add("hidden");
    }, 500);
  }

  function setUpGroup(event) {
    // Access the button element that triggered the form submission and get id
    let group = clickedButton.id;

    // Grab the form element
    let form = document.getElementById("group_study_form");

    // Create the input element
    var newInput = document.createElement('input');
    // Set attributes for the input element
    newInput.setAttribute('type', 'hidden');
    newInput.setAttribute('name', 'group');
    newInput.setAttribute('value', group);
    form.appendChild(newInput);
  }

  async function fetchJson(url, options = {}) {
    const response = await fetch(url, options);
    if (!response.ok) {
        throw new Error('Form submission failed');
    }
    return response.json();
  }

  async function displayGroupsDynamically() {
    try {
        // Fetch the groups list from database
        const groupsData = await fetchJson('/groups/get_groups', { method: 'post' });
        const groups = groupsData.groups;

        // Prepare the card template
        const cardTemplate = document.getElementById("groupCardTemplate");
        const fragment = document.createDocumentFragment();

        // Fetch all group names and member counts in parallel
        const groupDetailsPromises = groups.map(group => {
            const jsonObject = { group_id: group };

            const fetchGroupName = fetchJson('/groups/get_group_name', {
                method: 'post',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify(jsonObject)
            });

            const fetchGroupMembersCount = fetchJson('/groups/get_group_members_count', {
                method: 'post',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify(jsonObject)
            });
            return Promise.all([fetchGroupName, fetchGroupMembersCount, group]);
        });

        const groupDetails = await Promise.all(groupDetailsPromises);

        // Create and append the cards
        groupDetails.forEach(([groupNameData, groupMembersCountData, group], index) => {
            const newCard = cardTemplate.content.cloneNode(true);
            newCard.getElementById("group_name").textContent = groupNameData.groupName;
            newCard.getElementById("members_Count").textContent = `${groupMembersCountData.membersCount} people`;
            let button = newCard.querySelector('button');
            button.id = group;
            // Attach click event listener to the newly created button
            button.addEventListener('click', function(event) {
              clickedButton = event.currentTarget;
            });
            fragment.appendChild(newCard);
        });

        document.getElementById("groups_container").appendChild(fragment);

    } catch (error) {
        // Handle network errors or errors from the server
        console.error('Error:', error);
    }
  }

  const hrSpan = document.getElementById('hr');
  const minSpan = document.getElementById('min');
  const secSpan = document.getElementById("sec");
  const duration = <%= user.hours_per_day %>;

  function displayTime(){
    const hours = Math.floor(duration / 3600);
    const minutes = Math.floor((duration % 3600) / 60);
    const seconds = Math.floor(duration % 60);

    hrSpan.textContent = String(hours).padStart(2, '0');
    minSpan.textContent = String(minutes).padStart(2, '0');
    secSpan.textContent = String(seconds).padStart(2, '0');
  }

  let clickCount = 0;

  // Function to trigger the riddle modal
  document.addEventListener('click', function(event) {
      clickCount++;
      if (clickCount === 5) {
          document.getElementById('riddleModal').classList.remove('hidden');
      }
  });

  // Function to check the riddle answer
  function checkAnswer() {
      const answer = document.getElementById('riddleAnswer').value.trim().toLowerCase();
      const resultMessage = document.getElementById('resultMessage');
      const claimPrizeButton = document.getElementById('claimPrizeButton');
      if (answer === 'retail shop') {
          resultMessage.innerText = 'Congratulations! You have solved the riddle! You won $50';
          resultMessage.classList.add('text-celadon');
          // Add code here to handle the prize (e.g., displaying a special message, unlocking content, etc.)
          claimPrizeButton.classList.remove('hidden');
      } else {
          resultMessage.innerText = 'Sorry, that is not correct. Try again!';
          resultMessage.classList.add('text-light-coral');
          claimPrizeButton.classList.add('hidden');
      }
  }

  // Function to close the riddle modal
  function closeModal() {
      document.getElementById('riddleModal').classList.add('hidden');
      clickCount = 0; // Reset click count if needed
  }

  function claimPrize() {
      alert('You have claimed your prize!');
      // Add code here to handle the prize (e.g., unlocking content, redirecting to a special page, etc.)
      closeModal();
  }

  displayTime();
</script>
<%- include("templates/navbar") %>
