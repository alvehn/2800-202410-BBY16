<%- include("templates/default") %>
    <div class="flex flex-col items-center h-screen select-none">
        <div class="bg-celadon w-full p-4 flex flex-col items-center justify-center text-white">
            <img class="w-24 h-24 rounded-full object-cover border-4 border-white" src="https://via.placeholder.com/150"
                alt="profile picture">
            <h1 class="text-2xl font-bold mt-2">
                <%= displayName %>
            </h1>
        </div>
        <div class="flex justify-center mt-4">
            <!-- friends button -->
            <a class="<%= currentPage === 'friends' ? 'bg-celadon text-white' : 'bg-light-beige text-font hover:bg-celadon hover:text-white' %> font-bold py-2 px-4 rounded-full no-underline mr-3"
                href="/friends">Friends</a>
            <!-- groups button -->
            <a class="<%= currentPage === 'groups' ? 'bg-celadon text-white' : 'bg-light-beige text-font hover:bg-celadon hover:text-white' %> font-bold py-2 px-4 rounded-full no-underline ml-3"
                href="/groups">Groups</a>
        </div>

        <div class="pt-4 w-full max-w-md px-4">
            <!-- search field-->
            <div class="mb-4">
                <input id="searchField" type="text" placeholder=" 🔍 Search..."
                    class="w-full px-4 py-2 border border-gray-300 text-font rounded-3xl focus:outline-none focus:ring-2 focus:ring-celadon">
            </div>
            <div id="groups_container">
            </div>
            <div>
                <button id="open_create" onclick="openCreateGroups()"
                    class="fixed w-12 h-12 bottom-28 right-12 bg-celadon hover:bg-dark-celadon text-white rounded-full text-2xl flex items-center justify-center shadow-lg">+</button>
            </div>
        </div>

        <!--Modal for adding groups-->
        <div id="createGroup" onclick="hideCreateGroups()" class="fixed inset-0 bg-black bg-opacity-50 flex justify-center items-center opacity-0 transition-opacity duration-500 hidden">
            <div id="modal-container" class="w-full max-w-md overflow-auto">
                <div onclick="event.stopImmediatePropagation()" id="modal-content" class="w-full bg-white rounded-lg">
                    <div class="w-full flex-grow bg-white rounded-lg shadow-lg p-6">
                        <form id="form">
                            <p class="text-lg sm:text-xl md:text-2xl font-semibold text-font">Create Group</p>
                            <div class="mt-4">
                                <input name='group_name' id='group_name' type='text' placeholder='Group Name' 
                                class="w-full px-4 py-2 mb-4 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-celadon">
                            </div>
                            <p class="text-md sm:text-lg md:text-xl font-medium text-font">Select Friends</p>
                            <div id="friends_card_container" class="bg-white rounded-lg border p-4 mb-6"></div>
                            <p class="text-md sm:text-lg md:text-xl font-medium text-font">Upload Group Image</p>
                            <input name="group_image" id="group_image" type="file" accept="image/*" 
                                class="w-full px-4 py-4 mb-4 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-celadon">
                            <button type="button" onclick="return createGroup()"
                                class="w-full px-4 py-2 bg-celadon hover:bg-dark-celadon text-white rounded-3xl">Create group</button>
                        </form>
                        <div class="flex justify-center mt-4">
                            <button id="close_adding" onclick="hideCreateGroups()"
                                class="px-4 py-2 rounded-3xl bg-celadon hover:bg-dark-celadon text-white">Close</button>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
    <!-- This is the template for popup when viewing user profile -->
    <template id="groupCardTemplate">
        <div class="group flex justify-between bg-white p-3 border rounded-2xl mb-2 items-center transition-colors duration-100 hover:outline hover:outline-1 hover:outline-[#B5E58A] hover:shadow-[0_0_2px_2px_#B5E58A]">
            <img src="https://via.placeholder.com/50" alt="group picture" class="rounded-full w-12 h-12 object-cover">
            <div class=" w-60 ml-2">
                <div id="group_name" class="font-bold text-font"></div>
            </div>
            <div>
                <div id="members_Count" class="text-sm text-font"></div>
            </div>
        </div>
    </template>

    <!-- This is the template for popup when veiwing user profile -->
    <template id="friendCardTemplate">
        <input id="select" type="checkbox" value="" class="hidden">
        <label id="selectLabel" class="p-3 custom-border rounded-lg mb-2 w-full flex items-center cursor-pointer transition-colors duration-100 hover:outline hover:outline-1 hover:outline-[#8AE3E5] hover:shadow-[0_0_2px_2px_#8AE3E5]">
            <img src="https://via.placeholder.com/50" alt="profile picture" class="rounded-full w-12 h-12 object-cover border-3 border-white" id="profileImage">
            <span id="username" class="ml-4 font-medium text-font"></span>
        </label>
    </template>
    
    

    <script>
        // fix up Search bar for groups
        const eventSearch = document.getElementById("searchField");

        eventSearch.addEventListener("keyup", e => {
            // gets value of search bar and puts it to lowercase
            let currentValue = e.target.value.toLowerCase();
            // gets all the friend card titles
            let containers = document.querySelectorAll('.group');
            containers.forEach(container => {
                let name = container.querySelector('#group_name').textContent.toLowerCase();
                // checks if the friend username includes the searched letters
                if (name.includes(currentValue)) {
                    // accesses the variable that determines whether a name is visible or not
                    container.style.display = "flex";
                } else {
                    container.style.display = "none";
                }
            })
        })

        function toggleSelected(element) {
            element.classList.toggle('selected');
        }

        function openCreateGroups() {
            let popup = document.getElementById("createGroup");
            popup.classList.remove("hidden");
            setTimeout(() => {
                popup.classList.add("opacity-100");
            }, 20);
        }

        function hideCreateGroups() {
            let popup = document.getElementById("createGroup");
            popup.classList.add("opacity-0");
            popup.classList.remove("opacity-100");
            setTimeout(() => {
                popup.classList.add("hidden");
            }, 500);
        }

        function openProfile(username) {
            let popup = document.getElementById("friendProfile");
            popup.classList.remove("hidden");
            setTimeout(() => {
                popup.classList.add("opacity-100");
            }, 20);
        }

        function hideProfile() {
            let popup = document.getElementById("friendProfile");
            popup.classList.add("opacity-0");
            popup.classList.remove("opacity-100");
            setTimeout(() => {
                popup.classList.add("hidden");
            }, 500);
        }

        function createGroup() {
            let form = document.getElementById("form");

            // Initialize an array to store selected friends
            let selectedValues = [];

            // Serialize form data into a JSON object
            let jsonObject = {};
            for (let input of form.elements) {
                if (input.type === 'checkbox' && input.checked) {
                    // If the input type is a checkbox and it's checked, add its value to the selectedValues array
                    selectedValues.push(input.value);
                } else if (input.name) {
                    jsonObject[input.name] = input.value;
                }
            }
            // Check if any friends are selected, return message if none selected
            if (selectedValues.length == 0) {
                form.insertAdjacentHTML('afterend', `<p>Did not select any friends.</p>`);
                return;
            }
            // Finish serializing form data into a JSON object
            jsonObject["selected"] = selectedValues;

            fetch('/groups/check', {
                method: 'post',
                headers: {
                    'Content-Type': 'application/json' // Set Content-Type to JSON
                },
                body: JSON.stringify(jsonObject) // Send JSON data in the body
            })
                .then(response => {
                    if (response.ok) {
                        return response.json(); // Get the response as JSON
                    } else {
                        throw new Error('Form submission failed');
                    }
                })
                .then(data => {
                    console.log(data.message);
                    form.insertAdjacentHTML('afterend', `<p>${data.message}</p>`);
                })
                .catch(error => {
                    // Handle network errors or errors from the server
                    console.error('Error:', error);
                });
        }

        async function displayFriendsDynamically() {
            let friends;
            // fetch the friends list from database
            await fetch('/friends/get_friends', {
                method: 'post',
            })
                .then(response => {
                    if (response.ok) {
                        return response.json(); // Get the response as JSON
                    } else {
                        throw new Error('Form submission failed');
                    }
                })
                .then(data => {
                    friends = data.friends;
                })
                .catch(error => {
                    // Handle network errors or errors from the server
                    console.error('Error:', error);
                });
            // Creates the friends card
            let cardTemplate = document.getElementById("friendCardTemplate");
            let username = "test";
            for (let friend of friends) {
                let newcard = cardTemplate.content.cloneNode(true);
                // Serialize friend data into a JSON object
                let jsonObject = { friend_id: friend };
                // fetch friend username and status from the database
                await fetch('/friends/get_friend_status', {
                    method: 'post',
                    headers: {
                        'Content-Type': 'application/json' // Set Content-Type to JSON
                    },
                    body: JSON.stringify(jsonObject) // Send JSON data in the body
                })
                .then(response => {
                    if (response.ok) {
                        return response.json(); // Get the response as JSON
                    } else {
                        throw new Error('Form submission failed');
                    }
                })
                .then(data => {
                    username = data.username;
                })
                .catch(error => {
                    // Handle network errors or errors from the server
                    console.error('Error:', error);
                });
                newcard.getElementById("select").setAttribute('value', `${username}`);
                newcard.getElementById("select").setAttribute('id', `${username}`);
                newcard.getElementById("selectLabel").setAttribute('for', `${username}`);
                newcard.getElementById("selectLabel").setAttribute('id', `selectLabel${username}`);
                // newcard.getElementById("profileImage").src = profileImage;
                newcard.getElementById("username").textContent = `${username}`;
                document.getElementById("friends_card_container").appendChild(newcard);
            }
        }

        async function fetchJson(url, options = {}) {
            const response = await fetch(url, options);
            if (!response.ok) {
                throw new Error('Form submission failed');
            }
            return response.json();
        }

        async function displayGroupsDynamically() {
            let groups;
            await fetch('/groups/get_groups', {
                method: 'post',
            })
                .then(response => {
                    if (response.ok) {
                        return response.json(); // Get the response as JSON
                    } else {
                        throw new Error('Form submission failed');
                    }
                })
                .then(data => {
                    groups = data.groups;
                })
                .catch(error => {
                    console.error('Error:', error);
                });

            let cardTemplate = document.getElementById("groupCardTemplate");
            let groupName = "test";
            for (let group of groups) {
                let newcard = cardTemplate.content.cloneNode(true);
                // Serialize friend data into a JSON object
                let jsonObject = {};
                jsonObject["group_id"] = group;
                // fetch friend username and status from the database
                await fetch('/groups/get_group_details', {
                    method: 'post',
                    headers: {
                        'Content-Type': 'application/json' // Set Content-Type to JSON
                    },
                    body: JSON.stringify(jsonObject) // Send JSON data in the body
                })
                    .then(response => {
                        if (response.ok) {
                            return response.json(); // Get the response as JSON
                        } else {
                            throw new Error('Form submission failed');
                        }
                    })
                    .then(data => {
                        groupName = data.groupName;
                        membersCount = data.membersCount;
                    })
                    .catch(error => {
                        // Handle network errors or errors from the server
                        console.error('Error:', error);
                    });

                //<label id="selectLabel" class="p-4 border rounded-lg shadow-md mb-4 w-full"><input id="select" type="checkbox" value=""></label>
                newcard.getElementById("group_name").textContent = groupName;
                newcard.getElementById("members_Count").textContent = membersCount + " people";
                document.getElementById("groups_container").appendChild(newcard);
            }
        }

        displayGroupsDynamically();
        displayFriendsDynamically();


    </script>
    <%- include("templates/navbar") %>